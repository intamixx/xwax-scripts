#!/bin/bash
#    
# ======= intamixx session script ================
#    
# generated by chino-0.03 on
# Sat Jun 19 21:19:49 CEST 2010
#
#
# ======= Source the config =====================
. /intamixx/intamixxdj.conf
USER=root

# ======= termapp functions =====================
#
function termjackd()
{
    ${intamixx_basedir}/jackd stop
}
function termalsa_in()
{
    ${intamixx_basedir}/alsa_in stop
}
function termalsa_out()
{
    ${intamixx_basedir}/alsa_out stop
}
function termjack-rack-asus()
{
    ${intamixx_basedir}/jack-rack-asus stop
}
function termjack-rack-nvidia()
{
    ${intamixx_basedir}/jack-rack-nvidia stop
}
function termmeterbridge-vu()
{
    ${intamixx_basedir}/meterbridge-vu stop
}
function termmeterbridge-dpm()
{
    ${intamixx_basedir}/meterbridge-dpm stop
}
function terminvada-meter()
{
    ${intamixx_basedir}/invada-meter stop
}
function termfabla-sampler()
{
    ${intamixx_basedir}/fabla-sampler stop
}
function termxwax()
{
    killall -9 -w xwax
}
function termqjackctl()
{
    ${intamixx_basedir}/qjackctl stop
}
function termghostess()
{
    killall -9 -w ghostess &
}
#
# ======= kill the whole session ================
#
function killsession()
{
    termalsa_in
    termalsa_out
    termjack-rack-asus
    termjack-rack-nvidia
    termxwax
    termqjackctl
    termmeterbridge-vu
    termmeterbridge-dpm
    terminvada-meter
    termfabla-sampler
    termghostess
    exit
}
#
# execute the killsession function on ctrl+c 
#
trap killsession SIGINT SIGTERM
#
# ======= runapp functions ======================
#
# not called directly, but through 
# the startapp function (below)
#
echo "***************************************************"
echo "*              Intamixx DVS Script                *"
echo "***************************************************"
echo "
 ____  ____   ______   ____  ___ ___  ____  __ __  __ __      ___    __ __  _____
l    j|    \ |      T /    ||   |   ||    ||  T  T|  T  T    |   \  |  T  |/ ___/
 |  T |  _  \|      |/  o  || _   _ | |  | |  |  ||  |  |    |    \ |  |  (   \_ 
 |  | |  |  |l_j  l_j|     ||  \_/  | |  | l_   _jl_   _j    |  D  \|  |  |\__  |
 |  | |  |  |  |  |  |  _  ||   |   | |  | |     ||     |    |     |l  :  !/  \ |
 j  l |  |  |  |  |  |  |  ||   |   | j  l |  |  ||  |  |    |     | \   / \    |
|____jl__j__j  l__j  l__j__jl___j___j|____j|__j__||__j__|    l_____j  \_/   \___j
"
# === run JACKd
function runjackd()
{
    ${intamixx_basedir}/jackd start 
}
# === run alsa-in
function runalsa_in()
{
    ${intamixx_basedir}/alsa_in start
}
# === run alsa-out
function runalsa_out() 
{
    ${intamixx_basedir}/alsa_out start
}
# === run jack-rack
function runjack-rack-asus()
{
    ${intamixx_basedir}/jack-rack-asus start
}
# === run jack-rack
function runjack-rack-nvidia()
{
    ${intamixx_basedir}/jack-rack-nvidia start
}
# === run xwax 
function runxwax()
{
    ${intamixx_basedir}/xwax-jack.sh &
}
# === run meterbridge-vu
function runmeterbridge-vu()
{
    ${intamixx_basedir}/meterbridge-vu start
}
# === run meterbridge-dpm
function runmeterbridge-dpm()
{
    ${intamixx_basedir}/meterbridge-dpm start
}
function runinvada-meter()
{
    ${intamixx_basedir}/invada-meter start
}
function runfabla-sampler()
{
    ${intamixx_basedir}/fabla-sampler start
}
function runqjackctl()
{
    ${intamixx_basedir}/qjackctl start
}
# === run yoshimi
function runyoshimi()
{
    cd yoshimi
    yoshimi -a -J -l example-CH_02.xmz & 
    sleep 3
    yoshimi -a -J -l example-CH_03.xmz & 
    sleep 3
    yoshimi -a -J -l example-CH_08.xmz & 
    sleep 3
    cd ..
}
# === run amsynth
function runamsynth()
{
    cd amsynth
    amSynth -c 7 example-CH_07.bank &
    sleep 3
    cd ..
    jack_lsp | grep amSynth | grep L |
        while read line ; do
            jack_disconnect "${line}" "alsa_pcm:playback_1"
        done
    jack_lsp | grep amSynth | grep R |
        while read line ; do
	    jack_disconnect "${line}" "alsa_pcm:playback_2"
        done
}
# === run ghostess
function runghostess()
{
    # you may re use the initial ghostess startup command to recover
    #ghostess -noauto -chan 0 fluidsynth-dssi.so -chan 11 nekobee.so -chan 12 whysynth.so xy-controller-dssi.so
    # or execute the configuration script, if saved.
    cd ghostess
    ./example-ghostess.sh &
    sleep 5
    cd ..
}
#
# ========= start application
# a wrapper for the runapp and killapp functions. 
# takes the appname as a variable
function startapp()
{ 
    Q_APP=`ps aux | grep $USER | grep $1 | grep -v grep | wc -l`    # check if app is running
    if (( ${Q_APP} >= 1 )) ; then
    echo "$1 is running. [r]estart, start [a]nyway or do [n]nothing? (r/a/n)";
	while read -n 1 input ; do
	    if [[ ${input} = r ]] ; then
	        echo "
=== killing $1"
		term$1
		echo "
=== restarting $1"
		run$1
		break
            elif [[ ${input} = a ]] ; then
	        echo "
=== starting $1"
		run$1
	    elif [[ ${input} = n ]] ; then
		break
	        echo "
...cancelled.
"  
		break
	    else
		echo "
invalid commmand
"
	    fi
	done
    else
        run$1
    fi
}

#
# ========= call the startapps functions
#
function startapps()
{
deck1_cardnum=`awk '{i1=$0; getline ; i2=$0 ; x= i1 i2 ; print x}' /proc/asound/cards | grep -i $xwax_deck1 | awk -F' ' '{print $1}'`
deck2_cardnum=`awk '{i1=$0; getline ; i2=$0 ; x= i1 i2 ; print x}' /proc/asound/cards | grep -i $xwax_deck2 | awk -F' ' '{print $1}'`

echo "$xwax_deck1 is card $deck1_cardnum"
echo "$xwax_deck2 is card $deck2_cardnum"

    echo "=== starting JACKd"
    startapp jackd

# first check for jack
    echo "=== is JACK running?"
    Q_JACK=`(ps aux | grep $USER | grep jackd | wc -l)`    # check if running
    if (( ${Q_JACK} >=1 )) ; then
        echo "...yes"
    else
        echo "no." 
	exit
    fi
    echo "=== starting applications"
    echo " == starting alsa-in"
    startapp alsa_in
    sleep 3
    echo " == starting alsa-out"
    startapp alsa_out
    sleep 3
    echo " == starting jack-rack-asus"
    startapp jack-rack-asus
    sleep 3
    echo " == starting jack-rack-nvidia"
    startapp jack-rack-nvidia
    sleep 3
    echo " == starting xwax"
    startapp xwax
    sleep 3
#    echo " == starting meterbridge-vu"
#    startapp meterbridge-vu
#    sleep 3
    echo " == starting meterbridge-dpm"
    startapp meterbridge-dpm
    sleep 3
    echo " == starting invada-meter"
    startapp invada-meter
    sleep 3
    echo " == starting fabla-sampler"
    startapp fabla-sampler
    sleep 3
    echo " == starting qjackctl"
    startapp qjackctl
    sleep 3
}
#
# ======================== establish alsa-midi connections 
#
function alsaconnect()
{
    # MIDI USB --> Jack Rack
    aconnect 'USB MS1x1 MIDI Interface' 'JACK Rack (asus)'
    aconnect 'USB MS1x1 MIDI Interface' 'JACK Rack (nvidia)'

    # MIDI keyboard --> applications
#    aconnect  USB:1    Pure\ Data:0    
#    aconnect  USB:1    ntmsgfilter:0
#    aconnect  USB:1    ardour:0
    # MIDI controller --> applications
#    aconnect  nanoKONTROL:0    Pure\ Data:0
#    aconnect  nanoKONTROL:0    ardour:0

    # pd (for CC msg.) and ntmsgfilter (note-msg.) --> seq24
#    aconnect  Pure\ Data:2  seq24:16
#    aconnect  ntmsgfilter:1  seq24:16
    # seq24, pd (for CC msg.) and ntmsgfilter (for note msg.) --> all yoshimi
#    aconnect -o | grep 'yoshimi\|phasex\|amSynth\|ghostess' | grep client | sed 's/client \([0-9]3\)*/\1/' | sed  's/^\([0-9]*\).*/\1/' | 
#        while read line ; do
#            aconnect  seq24:0       ${line}:0
#            aconnect  Pure\ Data:2  ${line}:0
#            aconnect  ntmsgfilter:1 ${line}:0
#        done
}

#
# ======================== jack connection namagenemt with jack_snapshot
#
function jackstore()
{
    /usr/bin/jack_snapshot store ${jacksnapshot_dualconfig} 
}
#
function jackrestore()
{
    /usr/bin/jack_snapshot restore ${jacksnapshot_dualconfig} --noclear
	sleep 1
}
function jackrestore-1deck()
{
    /usr/bin/jack_snapshot restore ${jacksnapshot_1deckjackrackscratch_config} --noclear
	sleep 1
    ${intamixx_basedir}/intamixx-jackconn-disconnect
}
# use above functions to start a session
    echo

#
# ======================== real time config
#
function postrtconfig()
{
# "open up" the PCI bus by allowing fairly long bursts for all devices, increasing performance
	/sbin/setpci -v -s "*:*.*" latency_timer=b0 
# maximise latency for On Board Intel HDA, thus allowing more data per PCI transfer and minimizing xruns	
	/sbin/setpci -v -s 00:14.2 latency_timer=ff
# ditto for the Soundblaster Audigy 2
	/sbin/setpci -v -s 03:05.0 latency_timer=ff

	/bin/rtirq start
	/bin/rtirq status

	amixer -c $deck2_cardnum -- sset Master playback 77
	amixer -c $deck1_cardnum -- sset Master playback 100

	amixer -c $deck2_cardnum -- sset "Analog Mix" 84
	amixer -c $deck2_cardnum -- sset "Analog Mix" playback 0
	amixer -c $deck1_cardnum -- sset "Capture" 10
}
echo " ========== starting session ${NAME} =========="

startapps
sleep 3
alsaconnect
jackrestore
postrtconfig

#
# ======================== the loop listening for keyboard commands 
#
function keyinfo()
{
echo "
 ____  ____   ______   ____  ___ ___  ____  __ __  __ __      ___    __ __  _____
l    j|    \ |      T /    ||   |   ||    ||  T  T|  T  T    |   \  |  T  |/ ___/
 |  T |  _  \|      |/  o  || _   _ | |  | |  |  ||  |  |    |    \ |  |  (   \_ 
 |  | |  |  |l_j  l_j|     ||  \_/  | |  | l_   _jl_   _j    |  D  \|  |  |\__  |
 |  | |  |  |  |  |  |  _  ||   |   | |  | |     ||     |    |     |l  :  !/  \ |
 j  l |  |  |  |  |  |  |  ||   |   | j  l |  |  ||  |  |    |     | \   / \    |
|____jl__j__j  l__j  l__j__jl___j___j|____j|__j__||__j__|    l_____j  \_/   \___j

 press 
       a  to restart alsa-in
       b  to restart alsa-out
       j  to restart jack-rack-asus
       l  to restart jack-rack-nvidia
       x  to restart xwax
       q  to restart qjackctl
       v  to restart VU meterbridge
       d  to restart DPM meterbridge
       i  to restart Invada Meter
       f  to restart Fabla Sampler
       s  to store default jack connections
       r  to restore default jack connections
       G  to restart ghostess
  ctrl+c  to quit"
}
keyinfo
while read -n 1 input ; do  
    if   [[ "${input}" = "a" ]] ; then
        startapp alsa_in
    elif [[ "${input}" = "s" ]] ; then
        jackstore
    elif [[ "${input}" = "r" ]] ; then
        jackrestore
    elif [[ "${input}" = "b" ]] ; then
        startapp alsa_out
    elif [[ "${input}" = "j" ]] ; then
        startapp jack-rack-asus
    elif [[ "${input}" = "l" ]] ; then
        startapp jack-rack-nvidia
    elif [[ "${input}" = "x" ]] ; then
        startapp xwax
    elif [[ "${input}" = "q" ]] ; then
        startapp qjackctl
    elif [[ "${input}" = "v" ]] ; then
        startapp meterbridge-vu
    elif [[ "${input}" = "d" ]] ; then
        startapp meterbridge-dpm
    elif [[ "${input}" = "i" ]] ; then
        startapp invada-meter
    elif [[ "${input}" = "f" ]] ; then
        startapp fabla-sampler
    elif [[ "${input}" = "G" ]] ; then
        startapp ghostess
    else
        echo "
        invalid command"
        sleep 2
	clear
    fi
	clear
    keyinfo
done
